node {
  name: "x_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "y_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\034\000\000\000\034\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "x_input"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "first_layer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "first_layer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "first_layer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "first_layer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "first_layer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "first_layer/truncated_normal/mul"
  op: "Mul"
  input: "first_layer/truncated_normal/TruncatedNormal"
  input: "first_layer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "first_layer/truncated_normal"
  op: "Add"
  input: "first_layer/truncated_normal/mul"
  input: "first_layer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "first_layer/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "first_layer/weights/Assign"
  op: "Assign"
  input: "first_layer/weights"
  input: "first_layer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "first_layer/weights/read"
  op: "Identity"
  input: "first_layer/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "first_layer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "first_layer/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "first_layer/bias/Assign"
  op: "Assign"
  input: "first_layer/bias"
  input: "first_layer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "first_layer/bias/read"
  op: "Identity"
  input: "first_layer/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "first_layer/conv2d"
  op: "Conv2D"
  input: "Reshape"
  input: "first_layer/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "first_layer/add"
  op: "Add"
  input: "first_layer/conv2d"
  input: "first_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "first_layer/Relu"
  op: "Relu"
  input: "first_layer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "first_layer/pool"
  op: "MaxPool"
  input: "first_layer/Relu"
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "second_layer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "second_layer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "second_layer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "second_layer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "second_layer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "second_layer/truncated_normal/mul"
  op: "Mul"
  input: "second_layer/truncated_normal/TruncatedNormal"
  input: "second_layer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "second_layer/truncated_normal"
  op: "Add"
  input: "second_layer/truncated_normal/mul"
  input: "second_layer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "second_layer/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "second_layer/weights/Assign"
  op: "Assign"
  input: "second_layer/weights"
  input: "second_layer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "second_layer/weights/read"
  op: "Identity"
  input: "second_layer/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "second_layer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "second_layer/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "second_layer/bias/Assign"
  op: "Assign"
  input: "second_layer/bias"
  input: "second_layer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "second_layer/bias/read"
  op: "Identity"
  input: "second_layer/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "second_layer/conv2d"
  op: "Conv2D"
  input: "first_layer/pool"
  input: "second_layer/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "second_layer/add"
  op: "Add"
  input: "second_layer/conv2d"
  input: "second_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "second_layer/Relu"
  op: "Relu"
  input: "second_layer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "second_layer/pool"
  op: "MaxPool"
  input: "second_layer/Relu"
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "fc_layer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\014\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "fc_layer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc_layer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "fc_layer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "fc_layer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "fc_layer/truncated_normal/mul"
  op: "Mul"
  input: "fc_layer/truncated_normal/TruncatedNormal"
  input: "fc_layer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc_layer/truncated_normal"
  op: "Add"
  input: "fc_layer/truncated_normal/mul"
  input: "fc_layer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc_layer/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3136
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc_layer/weights/Assign"
  op: "Assign"
  input: "fc_layer/weights"
  input: "fc_layer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc_layer/weights/read"
  op: "Identity"
  input: "fc_layer/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc_layer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "fc_layer/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc_layer/bias/Assign"
  op: "Assign"
  input: "fc_layer/bias"
  input: "fc_layer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc_layer/bias/read"
  op: "Identity"
  input: "fc_layer/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc_layer/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\014\000\000"
      }
    }
  }
}
node {
  name: "fc_layer/Reshape"
  op: "Reshape"
  input: "second_layer/pool"
  input: "fc_layer/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc_layer/MatMul"
  op: "MatMul"
  input: "fc_layer/Reshape"
  input: "fc_layer/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fc_layer/add"
  op: "Add"
  input: "fc_layer/MatMul"
  input: "fc_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc_layer/Relu"
  op: "Relu"
  input: "fc_layer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_layer/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "dropout_layer/dropout/Shape"
  op: "Shape"
  input: "fc_layer/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_layer/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_layer/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_layer/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_layer/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_layer/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_layer/dropout/random_uniform/max"
  input: "dropout_layer/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_layer/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_layer/dropout/random_uniform/RandomUniform"
  input: "dropout_layer/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_layer/dropout/random_uniform"
  op: "Add"
  input: "dropout_layer/dropout/random_uniform/mul"
  input: "dropout_layer/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_layer/dropout/add"
  op: "Add"
  input: "dropout_layer/Placeholder"
  input: "dropout_layer/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_layer/dropout/Floor"
  op: "Floor"
  input: "dropout_layer/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_layer/dropout/Inv"
  op: "Inv"
  input: "dropout_layer/Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_layer/dropout/mul"
  op: "Mul"
  input: "fc_layer/Relu"
  input: "dropout_layer/dropout/Inv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_layer/dropout/mul_1"
  op: "Mul"
  input: "dropout_layer/dropout/mul"
  input: "dropout_layer/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "readout_layer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "readout_layer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "readout_layer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "readout_layer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "readout_layer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "readout_layer/truncated_normal/mul"
  op: "Mul"
  input: "readout_layer/truncated_normal/TruncatedNormal"
  input: "readout_layer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "readout_layer/truncated_normal"
  op: "Add"
  input: "readout_layer/truncated_normal/mul"
  input: "readout_layer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "readout_layer/weights"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "readout_layer/weights/Assign"
  op: "Assign"
  input: "readout_layer/weights"
  input: "readout_layer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "readout_layer/weights/read"
  op: "Identity"
  input: "readout_layer/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "readout_layer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "readout_layer/bias"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "readout_layer/bias/Assign"
  op: "Assign"
  input: "readout_layer/bias"
  input: "readout_layer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "readout_layer/bias/read"
  op: "Identity"
  input: "readout_layer/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_layer/MatMul"
  op: "MatMul"
  input: "dropout_layer/dropout/mul_1"
  input: "readout_layer/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_layer/add"
  op: "Add"
  input: "softmax_layer/MatMul"
  input: "readout_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_layer/Softmax"
  op: "Softmax"
  input: "softmax_layer/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost_func/Log"
  op: "Log"
  input: "softmax_layer/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost_func/mul"
  op: "Mul"
  input: "y_input"
  input: "cost_func/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost_func/Rank"
  op: "Rank"
  input: "cost_func/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost_func/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cost_func/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cost_func/range"
  op: "Range"
  input: "cost_func/range/start"
  input: "cost_func/Rank"
  input: "cost_func/range/delta"
}
node {
  name: "cost_func/Sum"
  op: "Sum"
  input: "cost_func/mul"
  input: "cost_func/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cost_func/Neg"
  op: "Neg"
  input: "cost_func/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cost_func/ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "cross_entropy"
      }
    }
  }
}
node {
  name: "cost_func/ScalarSummary"
  op: "ScalarSummary"
  input: "cost_func/ScalarSummary/tags"
  input: "cost_func/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/Shape"
  op: "Shape"
  input: "cost_func/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/gradients/Fill"
  op: "Fill"
  input: "training/gradients/Shape"
  input: "training/gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/Neg_grad/Neg"
  op: "Neg"
  input: "training/gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/Sum_grad/Shape"
  op: "Shape"
  input: "cost_func/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/Sum_grad/Rank"
  op: "Rank"
  input: "cost_func/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/Sum_grad/Shape_1"
  op: "Shape"
  input: "cost_func/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/cost_func/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/gradients/cost_func/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/gradients/cost_func/Sum_grad/range"
  op: "Range"
  input: "training/gradients/cost_func/Sum_grad/range/start"
  input: "training/gradients/cost_func/Sum_grad/Rank"
  input: "training/gradients/cost_func/Sum_grad/range/delta"
}
node {
  name: "training/gradients/cost_func/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/gradients/cost_func/Sum_grad/Fill"
  op: "Fill"
  input: "training/gradients/cost_func/Sum_grad/Shape_1"
  input: "training/gradients/cost_func/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/cost_func/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/gradients/cost_func/Sum_grad/range"
  input: "cost_func/range"
  input: "training/gradients/cost_func/Sum_grad/Shape"
  input: "training/gradients/cost_func/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/cost_func/Sum_grad/floordiv"
  op: "Div"
  input: "training/gradients/cost_func/Sum_grad/Shape"
  input: "training/gradients/cost_func/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/gradients/cost_func/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/cost_func/Neg_grad/Neg"
  input: "training/gradients/cost_func/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/Sum_grad/Tile"
  op: "Tile"
  input: "training/gradients/cost_func/Sum_grad/Reshape"
  input: "training/gradients/cost_func/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/mul_grad/Shape"
  op: "Shape"
  input: "y_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/mul_grad/Shape_1"
  op: "Shape"
  input: "cost_func/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/cost_func/mul_grad/Shape"
  input: "training/gradients/cost_func/mul_grad/Shape_1"
}
node {
  name: "training/gradients/cost_func/mul_grad/mul"
  op: "Mul"
  input: "training/gradients/cost_func/Sum_grad/Tile"
  input: "cost_func/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/mul_grad/Sum"
  op: "Sum"
  input: "training/gradients/cost_func/mul_grad/mul"
  input: "training/gradients/cost_func/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/cost_func/mul_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/cost_func/mul_grad/Sum"
  input: "training/gradients/cost_func/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/mul_grad/mul_1"
  op: "Mul"
  input: "y_input"
  input: "training/gradients/cost_func/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/mul_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/cost_func/mul_grad/mul_1"
  input: "training/gradients/cost_func/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/cost_func/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/cost_func/mul_grad/Sum_1"
  input: "training/gradients/cost_func/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/cost_func/mul_grad/Reshape"
  input: "^training/gradients/cost_func/mul_grad/Reshape_1"
}
node {
  name: "training/gradients/cost_func/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/cost_func/mul_grad/Reshape"
  input: "^training/gradients/cost_func/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/cost_func/mul_grad/Reshape_1"
  input: "^training/gradients/cost_func/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/Log_grad/Inv"
  op: "Inv"
  input: "softmax_layer/Softmax"
  input: "^training/gradients/cost_func/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/cost_func/Log_grad/mul"
  op: "Mul"
  input: "training/gradients/cost_func/mul_grad/tuple/control_dependency_1"
  input: "training/gradients/cost_func/Log_grad/Inv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/Softmax_grad/mul"
  op: "Mul"
  input: "training/gradients/cost_func/Log_grad/mul"
  input: "softmax_layer/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/gradients/softmax_layer/Softmax_grad/Sum"
  op: "Sum"
  input: "training/gradients/softmax_layer/Softmax_grad/mul"
  input: "training/gradients/softmax_layer/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/softmax_layer/Softmax_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/gradients/softmax_layer/Softmax_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/softmax_layer/Softmax_grad/Sum"
  input: "training/gradients/softmax_layer/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/Softmax_grad/sub"
  op: "Sub"
  input: "training/gradients/cost_func/Log_grad/mul"
  input: "training/gradients/softmax_layer/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/gradients/softmax_layer/Softmax_grad/sub"
  input: "softmax_layer/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/add_grad/Shape"
  op: "Shape"
  input: "softmax_layer/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/add_grad/Shape_1"
  op: "Shape"
  input: "readout_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/softmax_layer/add_grad/Shape"
  input: "training/gradients/softmax_layer/add_grad/Shape_1"
}
node {
  name: "training/gradients/softmax_layer/add_grad/Sum"
  op: "Sum"
  input: "training/gradients/softmax_layer/Softmax_grad/mul_1"
  input: "training/gradients/softmax_layer/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/softmax_layer/add_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/softmax_layer/add_grad/Sum"
  input: "training/gradients/softmax_layer/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/add_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/softmax_layer/Softmax_grad/mul_1"
  input: "training/gradients/softmax_layer/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/softmax_layer/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/softmax_layer/add_grad/Sum_1"
  input: "training/gradients/softmax_layer/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/softmax_layer/add_grad/Reshape"
  input: "^training/gradients/softmax_layer/add_grad/Reshape_1"
}
node {
  name: "training/gradients/softmax_layer/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/softmax_layer/add_grad/Reshape"
  input: "^training/gradients/softmax_layer/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/softmax_layer/add_grad/Reshape_1"
  input: "^training/gradients/softmax_layer/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/gradients/softmax_layer/add_grad/tuple/control_dependency"
  input: "readout_layer/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/gradients/softmax_layer/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout_layer/dropout/mul_1"
  input: "training/gradients/softmax_layer/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/softmax_layer/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/softmax_layer/MatMul_grad/MatMul"
  input: "^training/gradients/softmax_layer/MatMul_grad/MatMul_1"
}
node {
  name: "training/gradients/softmax_layer/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/softmax_layer/MatMul_grad/MatMul"
  input: "^training/gradients/softmax_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/softmax_layer/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/softmax_layer/MatMul_grad/MatMul_1"
  input: "^training/gradients/softmax_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "dropout_layer/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dropout_layer/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/Shape"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/Shape_1"
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/mul"
  op: "Mul"
  input: "training/gradients/softmax_layer/MatMul_grad/tuple/control_dependency"
  input: "dropout_layer/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/mul"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/Sum"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/mul_1"
  op: "Mul"
  input: "dropout_layer/dropout/mul"
  input: "training/gradients/softmax_layer/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/mul_1"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/Sum_1"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/dropout_layer/dropout/mul_1_grad/Reshape"
  input: "^training/gradients/dropout_layer/dropout/mul_1_grad/Reshape_1"
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/Reshape"
  input: "^training/gradients/dropout_layer/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/Reshape_1"
  input: "^training/gradients/dropout_layer/dropout/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/Shape"
  op: "Shape"
  input: "fc_layer/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dropout_layer/dropout/Inv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/dropout_layer/dropout/mul_grad/Shape"
  input: "training/gradients/dropout_layer/dropout/mul_grad/Shape_1"
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/mul"
  op: "Mul"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/tuple/control_dependency"
  input: "dropout_layer/dropout/Inv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/Sum"
  op: "Sum"
  input: "training/gradients/dropout_layer/dropout/mul_grad/mul"
  input: "training/gradients/dropout_layer/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/dropout_layer/dropout/mul_grad/Sum"
  input: "training/gradients/dropout_layer/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "fc_layer/Relu"
  input: "training/gradients/dropout_layer/dropout/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/dropout_layer/dropout/mul_grad/mul_1"
  input: "training/gradients/dropout_layer/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/dropout_layer/dropout/mul_grad/Sum_1"
  input: "training/gradients/dropout_layer/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/dropout_layer/dropout/mul_grad/Reshape"
  input: "^training/gradients/dropout_layer/dropout/mul_grad/Reshape_1"
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/dropout_layer/dropout/mul_grad/Reshape"
  input: "^training/gradients/dropout_layer/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/dropout_layer/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/dropout_layer/dropout/mul_grad/Reshape_1"
  input: "^training/gradients/dropout_layer/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/fc_layer/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/gradients/dropout_layer/dropout/mul_grad/tuple/control_dependency"
  input: "fc_layer/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/fc_layer/add_grad/Shape"
  op: "Shape"
  input: "fc_layer/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/fc_layer/add_grad/Shape_1"
  op: "Shape"
  input: "fc_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/fc_layer/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/fc_layer/add_grad/Shape"
  input: "training/gradients/fc_layer/add_grad/Shape_1"
}
node {
  name: "training/gradients/fc_layer/add_grad/Sum"
  op: "Sum"
  input: "training/gradients/fc_layer/Relu_grad/ReluGrad"
  input: "training/gradients/fc_layer/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/fc_layer/add_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/fc_layer/add_grad/Sum"
  input: "training/gradients/fc_layer/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/fc_layer/add_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/fc_layer/Relu_grad/ReluGrad"
  input: "training/gradients/fc_layer/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/fc_layer/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/fc_layer/add_grad/Sum_1"
  input: "training/gradients/fc_layer/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/fc_layer/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/fc_layer/add_grad/Reshape"
  input: "^training/gradients/fc_layer/add_grad/Reshape_1"
}
node {
  name: "training/gradients/fc_layer/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/fc_layer/add_grad/Reshape"
  input: "^training/gradients/fc_layer/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/fc_layer/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/fc_layer/add_grad/Reshape_1"
  input: "^training/gradients/fc_layer/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/fc_layer/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/gradients/fc_layer/add_grad/tuple/control_dependency"
  input: "fc_layer/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/gradients/fc_layer/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fc_layer/Reshape"
  input: "training/gradients/fc_layer/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/fc_layer/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/fc_layer/MatMul_grad/MatMul"
  input: "^training/gradients/fc_layer/MatMul_grad/MatMul_1"
}
node {
  name: "training/gradients/fc_layer/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/fc_layer/MatMul_grad/MatMul"
  input: "^training/gradients/fc_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/fc_layer/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/fc_layer/MatMul_grad/MatMul_1"
  input: "^training/gradients/fc_layer/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/fc_layer/Reshape_grad/Shape"
  op: "Shape"
  input: "second_layer/pool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/fc_layer/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/fc_layer/MatMul_grad/tuple/control_dependency"
  input: "training/gradients/fc_layer/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/second_layer/pool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "second_layer/Relu"
  input: "second_layer/pool"
  input: "training/gradients/fc_layer/Reshape_grad/Reshape"
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "training/gradients/second_layer/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/gradients/second_layer/pool_grad/MaxPoolGrad"
  input: "second_layer/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/second_layer/add_grad/Shape"
  op: "Shape"
  input: "second_layer/conv2d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/second_layer/add_grad/Shape_1"
  op: "Shape"
  input: "second_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/second_layer/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/second_layer/add_grad/Shape"
  input: "training/gradients/second_layer/add_grad/Shape_1"
}
node {
  name: "training/gradients/second_layer/add_grad/Sum"
  op: "Sum"
  input: "training/gradients/second_layer/Relu_grad/ReluGrad"
  input: "training/gradients/second_layer/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/second_layer/add_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/second_layer/add_grad/Sum"
  input: "training/gradients/second_layer/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/second_layer/add_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/second_layer/Relu_grad/ReluGrad"
  input: "training/gradients/second_layer/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/second_layer/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/second_layer/add_grad/Sum_1"
  input: "training/gradients/second_layer/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/second_layer/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/second_layer/add_grad/Reshape"
  input: "^training/gradients/second_layer/add_grad/Reshape_1"
}
node {
  name: "training/gradients/second_layer/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/second_layer/add_grad/Reshape"
  input: "^training/gradients/second_layer/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/second_layer/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/second_layer/add_grad/Reshape_1"
  input: "^training/gradients/second_layer/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/second_layer/conv2d_grad/Shape"
  op: "Shape"
  input: "first_layer/pool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/second_layer/conv2d_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/gradients/second_layer/conv2d_grad/Shape"
  input: "second_layer/weights/read"
  input: "training/gradients/second_layer/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/gradients/second_layer/conv2d_grad/Shape_1"
  op: "Shape"
  input: "second_layer/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/second_layer/conv2d_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "first_layer/pool"
  input: "training/gradients/second_layer/conv2d_grad/Shape_1"
  input: "training/gradients/second_layer/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/gradients/second_layer/conv2d_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/second_layer/conv2d_grad/Conv2DBackpropInput"
  input: "^training/gradients/second_layer/conv2d_grad/Conv2DBackpropFilter"
}
node {
  name: "training/gradients/second_layer/conv2d_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/second_layer/conv2d_grad/Conv2DBackpropInput"
  input: "^training/gradients/second_layer/conv2d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/second_layer/conv2d_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/second_layer/conv2d_grad/Conv2DBackpropFilter"
  input: "^training/gradients/second_layer/conv2d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/first_layer/pool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "first_layer/Relu"
  input: "first_layer/pool"
  input: "training/gradients/second_layer/conv2d_grad/tuple/control_dependency"
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "training/gradients/first_layer/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/gradients/first_layer/pool_grad/MaxPoolGrad"
  input: "first_layer/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/first_layer/add_grad/Shape"
  op: "Shape"
  input: "first_layer/conv2d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/first_layer/add_grad/Shape_1"
  op: "Shape"
  input: "first_layer/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/first_layer/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/gradients/first_layer/add_grad/Shape"
  input: "training/gradients/first_layer/add_grad/Shape_1"
}
node {
  name: "training/gradients/first_layer/add_grad/Sum"
  op: "Sum"
  input: "training/gradients/first_layer/Relu_grad/ReluGrad"
  input: "training/gradients/first_layer/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/first_layer/add_grad/Reshape"
  op: "Reshape"
  input: "training/gradients/first_layer/add_grad/Sum"
  input: "training/gradients/first_layer/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/first_layer/add_grad/Sum_1"
  op: "Sum"
  input: "training/gradients/first_layer/Relu_grad/ReluGrad"
  input: "training/gradients/first_layer/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/gradients/first_layer/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/gradients/first_layer/add_grad/Sum_1"
  input: "training/gradients/first_layer/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/first_layer/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/first_layer/add_grad/Reshape"
  input: "^training/gradients/first_layer/add_grad/Reshape_1"
}
node {
  name: "training/gradients/first_layer/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/first_layer/add_grad/Reshape"
  input: "^training/gradients/first_layer/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/first_layer/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/first_layer/add_grad/Reshape_1"
  input: "^training/gradients/first_layer/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/first_layer/conv2d_grad/Shape"
  op: "Shape"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/first_layer/conv2d_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/gradients/first_layer/conv2d_grad/Shape"
  input: "first_layer/weights/read"
  input: "training/gradients/first_layer/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/gradients/first_layer/conv2d_grad/Shape_1"
  op: "Shape"
  input: "first_layer/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/first_layer/conv2d_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Reshape"
  input: "training/gradients/first_layer/conv2d_grad/Shape_1"
  input: "training/gradients/first_layer/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/gradients/first_layer/conv2d_grad/tuple/group_deps"
  op: "NoOp"
  input: "^training/gradients/first_layer/conv2d_grad/Conv2DBackpropInput"
  input: "^training/gradients/first_layer/conv2d_grad/Conv2DBackpropFilter"
}
node {
  name: "training/gradients/first_layer/conv2d_grad/tuple/control_dependency"
  op: "Identity"
  input: "training/gradients/first_layer/conv2d_grad/Conv2DBackpropInput"
  input: "^training/gradients/first_layer/conv2d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/gradients/first_layer/conv2d_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "training/gradients/first_layer/conv2d_grad/Conv2DBackpropFilter"
  input: "^training/gradients/first_layer/conv2d_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "training/beta1_power"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/beta1_power/Assign"
  op: "Assign"
  input: "training/beta1_power"
  input: "training/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/beta1_power/read"
  op: "Identity"
  input: "training/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "training/beta2_power"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/beta2_power/Assign"
  op: "Assign"
  input: "training/beta2_power"
  input: "training/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/beta2_power/read"
  op: "Identity"
  input: "training/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/first_layer/weights/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/first_layer/weights/Adam/Assign"
  op: "Assign"
  input: "training/first_layer/weights/Adam"
  input: "training/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/first_layer/weights/Adam/read"
  op: "Identity"
  input: "training/first_layer/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/first_layer/weights/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/first_layer/weights/Adam_1/Assign"
  op: "Assign"
  input: "training/first_layer/weights/Adam_1"
  input: "training/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/first_layer/weights/Adam_1/read"
  op: "Identity"
  input: "training/first_layer/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/first_layer/bias/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/first_layer/bias/Adam/Assign"
  op: "Assign"
  input: "training/first_layer/bias/Adam"
  input: "training/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/first_layer/bias/Adam/read"
  op: "Identity"
  input: "training/first_layer/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/first_layer/bias/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/first_layer/bias/Adam_1/Assign"
  op: "Assign"
  input: "training/first_layer/bias/Adam_1"
  input: "training/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/first_layer/bias/Adam_1/read"
  op: "Identity"
  input: "training/first_layer/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/second_layer/weights/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/second_layer/weights/Adam/Assign"
  op: "Assign"
  input: "training/second_layer/weights/Adam"
  input: "training/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/second_layer/weights/Adam/read"
  op: "Identity"
  input: "training/second_layer/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/second_layer/weights/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/second_layer/weights/Adam_1/Assign"
  op: "Assign"
  input: "training/second_layer/weights/Adam_1"
  input: "training/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/second_layer/weights/Adam_1/read"
  op: "Identity"
  input: "training/second_layer/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/second_layer/bias/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/second_layer/bias/Adam/Assign"
  op: "Assign"
  input: "training/second_layer/bias/Adam"
  input: "training/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/second_layer/bias/Adam/read"
  op: "Identity"
  input: "training/second_layer/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/second_layer/bias/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/second_layer/bias/Adam_1/Assign"
  op: "Assign"
  input: "training/second_layer/bias/Adam_1"
  input: "training/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/second_layer/bias/Adam_1/read"
  op: "Identity"
  input: "training/second_layer/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3136
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/fc_layer/weights/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3136
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/fc_layer/weights/Adam/Assign"
  op: "Assign"
  input: "training/fc_layer/weights/Adam"
  input: "training/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/fc_layer/weights/Adam/read"
  op: "Identity"
  input: "training/fc_layer/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3136
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/fc_layer/weights/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3136
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/fc_layer/weights/Adam_1/Assign"
  op: "Assign"
  input: "training/fc_layer/weights/Adam_1"
  input: "training/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/fc_layer/weights/Adam_1/read"
  op: "Identity"
  input: "training/fc_layer/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/fc_layer/bias/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/fc_layer/bias/Adam/Assign"
  op: "Assign"
  input: "training/fc_layer/bias/Adam"
  input: "training/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/fc_layer/bias/Adam/read"
  op: "Identity"
  input: "training/fc_layer/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/fc_layer/bias/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/fc_layer/bias/Adam_1/Assign"
  op: "Assign"
  input: "training/fc_layer/bias/Adam_1"
  input: "training/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/fc_layer/bias/Adam_1/read"
  op: "Identity"
  input: "training/fc_layer/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/readout_layer/weights/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/readout_layer/weights/Adam/Assign"
  op: "Assign"
  input: "training/readout_layer/weights/Adam"
  input: "training/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/readout_layer/weights/Adam/read"
  op: "Identity"
  input: "training/readout_layer/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/readout_layer/weights/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/readout_layer/weights/Adam_1/Assign"
  op: "Assign"
  input: "training/readout_layer/weights/Adam_1"
  input: "training/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/readout_layer/weights/Adam_1/read"
  op: "Identity"
  input: "training/readout_layer/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/readout_layer/bias/Adam"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/readout_layer/bias/Adam/Assign"
  op: "Assign"
  input: "training/readout_layer/bias/Adam"
  input: "training/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/readout_layer/bias/Adam/read"
  op: "Identity"
  input: "training/readout_layer/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/zeros_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/readout_layer/bias/Adam_1"
  op: "Variable"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/readout_layer/bias/Adam_1/Assign"
  op: "Assign"
  input: "training/readout_layer/bias/Adam_1"
  input: "training/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/readout_layer/bias/Adam_1/read"
  op: "Identity"
  input: "training/readout_layer/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-05
      }
    }
  }
}
node {
  name: "training/Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "training/Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "training/Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "training/Adam/update_first_layer/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "first_layer/weights"
  input: "training/first_layer/weights/Adam"
  input: "training/first_layer/weights/Adam_1"
  input: "training/beta1_power/read"
  input: "training/beta2_power/read"
  input: "training/Adam/learning_rate"
  input: "training/Adam/beta1"
  input: "training/Adam/beta2"
  input: "training/Adam/epsilon"
  input: "training/gradients/first_layer/conv2d_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/update_first_layer/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "first_layer/bias"
  input: "training/first_layer/bias/Adam"
  input: "training/first_layer/bias/Adam_1"
  input: "training/beta1_power/read"
  input: "training/beta2_power/read"
  input: "training/Adam/learning_rate"
  input: "training/Adam/beta1"
  input: "training/Adam/beta2"
  input: "training/Adam/epsilon"
  input: "training/gradients/first_layer/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/update_second_layer/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "second_layer/weights"
  input: "training/second_layer/weights/Adam"
  input: "training/second_layer/weights/Adam_1"
  input: "training/beta1_power/read"
  input: "training/beta2_power/read"
  input: "training/Adam/learning_rate"
  input: "training/Adam/beta1"
  input: "training/Adam/beta2"
  input: "training/Adam/epsilon"
  input: "training/gradients/second_layer/conv2d_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/update_second_layer/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "second_layer/bias"
  input: "training/second_layer/bias/Adam"
  input: "training/second_layer/bias/Adam_1"
  input: "training/beta1_power/read"
  input: "training/beta2_power/read"
  input: "training/Adam/learning_rate"
  input: "training/Adam/beta1"
  input: "training/Adam/beta2"
  input: "training/Adam/epsilon"
  input: "training/gradients/second_layer/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/update_fc_layer/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fc_layer/weights"
  input: "training/fc_layer/weights/Adam"
  input: "training/fc_layer/weights/Adam_1"
  input: "training/beta1_power/read"
  input: "training/beta2_power/read"
  input: "training/Adam/learning_rate"
  input: "training/Adam/beta1"
  input: "training/Adam/beta2"
  input: "training/Adam/epsilon"
  input: "training/gradients/fc_layer/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/update_fc_layer/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "fc_layer/bias"
  input: "training/fc_layer/bias/Adam"
  input: "training/fc_layer/bias/Adam_1"
  input: "training/beta1_power/read"
  input: "training/beta2_power/read"
  input: "training/Adam/learning_rate"
  input: "training/Adam/beta1"
  input: "training/Adam/beta2"
  input: "training/Adam/epsilon"
  input: "training/gradients/fc_layer/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/update_readout_layer/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "readout_layer/weights"
  input: "training/readout_layer/weights/Adam"
  input: "training/readout_layer/weights/Adam_1"
  input: "training/beta1_power/read"
  input: "training/beta2_power/read"
  input: "training/Adam/learning_rate"
  input: "training/Adam/beta1"
  input: "training/Adam/beta2"
  input: "training/Adam/epsilon"
  input: "training/gradients/softmax_layer/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/update_readout_layer/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "readout_layer/bias"
  input: "training/readout_layer/bias/Adam"
  input: "training/readout_layer/bias/Adam_1"
  input: "training/beta1_power/read"
  input: "training/beta2_power/read"
  input: "training/Adam/learning_rate"
  input: "training/Adam/beta1"
  input: "training/Adam/beta2"
  input: "training/Adam/epsilon"
  input: "training/gradients/softmax_layer/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "training/beta1_power/read"
  input: "training/Adam/beta1"
  input: "^training/Adam/update_first_layer/weights/ApplyAdam"
  input: "^training/Adam/update_first_layer/bias/ApplyAdam"
  input: "^training/Adam/update_second_layer/weights/ApplyAdam"
  input: "^training/Adam/update_second_layer/bias/ApplyAdam"
  input: "^training/Adam/update_fc_layer/weights/ApplyAdam"
  input: "^training/Adam/update_fc_layer/bias/ApplyAdam"
  input: "^training/Adam/update_readout_layer/weights/ApplyAdam"
  input: "^training/Adam/update_readout_layer/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/beta1_power"
  input: "training/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "training/beta2_power/read"
  input: "training/Adam/beta2"
  input: "^training/Adam/update_first_layer/weights/ApplyAdam"
  input: "^training/Adam/update_first_layer/bias/ApplyAdam"
  input: "^training/Adam/update_second_layer/weights/ApplyAdam"
  input: "^training/Adam/update_second_layer/bias/ApplyAdam"
  input: "^training/Adam/update_fc_layer/weights/ApplyAdam"
  input: "^training/Adam/update_fc_layer/bias/ApplyAdam"
  input: "^training/Adam/update_readout_layer/weights/ApplyAdam"
  input: "^training/Adam/update_readout_layer/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/beta2_power"
  input: "training/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam"
  op: "NoOp"
  input: "^training/Adam/update_first_layer/weights/ApplyAdam"
  input: "^training/Adam/update_first_layer/bias/ApplyAdam"
  input: "^training/Adam/update_second_layer/weights/ApplyAdam"
  input: "^training/Adam/update_second_layer/bias/ApplyAdam"
  input: "^training/Adam/update_fc_layer/weights/ApplyAdam"
  input: "^training/Adam/update_fc_layer/bias/ApplyAdam"
  input: "^training/Adam/update_readout_layer/weights/ApplyAdam"
  input: "^training/Adam/update_readout_layer/bias/ApplyAdam"
  input: "^training/Adam/Assign"
  input: "^training/Adam/Assign_1"
}
node {
  name: "test/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "test/ArgMax"
  op: "ArgMax"
  input: "softmax_layer/Softmax"
  input: "test/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "test/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "test/ArgMax_1"
  op: "ArgMax"
  input: "y_input"
  input: "test/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "test/Equal"
  op: "Equal"
  input: "test/ArgMax"
  input: "test/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "test/Cast"
  op: "Cast"
  input: "test/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "test/Rank"
  op: "Rank"
  input: "test/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "test/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "test/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "test/range"
  op: "Range"
  input: "test/range/start"
  input: "test/Rank"
  input: "test/range/delta"
}
node {
  name: "test/Mean"
  op: "Mean"
  input: "test/Cast"
  input: "test/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "test/ScalarSummary/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "accuracy"
      }
    }
  }
}
node {
  name: "test/ScalarSummary"
  op: "ScalarSummary"
  input: "test/ScalarSummary/tags"
  input: "test/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MergeSummary/MergeSummary"
  op: "MergeSummary"
  input: "cost_func/ScalarSummary"
  input: "test/ScalarSummary"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^first_layer/weights/Assign"
  input: "^first_layer/bias/Assign"
  input: "^second_layer/weights/Assign"
  input: "^second_layer/bias/Assign"
  input: "^fc_layer/weights/Assign"
  input: "^fc_layer/bias/Assign"
  input: "^readout_layer/weights/Assign"
  input: "^readout_layer/bias/Assign"
  input: "^training/beta1_power/Assign"
  input: "^training/beta2_power/Assign"
  input: "^training/first_layer/weights/Adam/Assign"
  input: "^training/first_layer/weights/Adam_1/Assign"
  input: "^training/first_layer/bias/Adam/Assign"
  input: "^training/first_layer/bias/Adam_1/Assign"
  input: "^training/second_layer/weights/Adam/Assign"
  input: "^training/second_layer/weights/Adam_1/Assign"
  input: "^training/second_layer/bias/Adam/Assign"
  input: "^training/second_layer/bias/Adam_1/Assign"
  input: "^training/fc_layer/weights/Adam/Assign"
  input: "^training/fc_layer/weights/Adam_1/Assign"
  input: "^training/fc_layer/bias/Adam/Assign"
  input: "^training/fc_layer/bias/Adam_1/Assign"
  input: "^training/readout_layer/weights/Adam/Assign"
  input: "^training/readout_layer/weights/Adam_1/Assign"
  input: "^training/readout_layer/bias/Adam/Assign"
  input: "^training/readout_layer/bias/Adam_1/Assign"
}
versions {
  producer: 8
}
